{
	"info": {
		"_postman_id": "6a1269fa-b442-42ff-bfe7-d318ed6487c1",
		"name": "Automation_CA-Marketing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29356510"
	},
	"item": [
		{
			"name": "Create new postal address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"",
							"}",
							"",
							"tests['Response code is 200 ok'] = responseCode.code === 200;",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"Response assertions\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"})",
							"",
							"//Response body Contains string (current sample)",
							"pm.test(\"Body contains string id\", () => {",
							"    pm.expect(pm.response.text()).to.include(\"id\");",
							"})",
							"",
							"//Respons Time",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"tests['Response Time is Acceptable'] = responseTime < 1000;",
							"",
							"//Response Size",
							"pm.test(\"Response size is less than 2000 B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"//Response Header tests",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Content-Length\", \"45\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							"",
							"pm.test(\"Response should be okay to process\", function() {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"})",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"address\": {\n        \"fullName\": {\n            \"firstName\": \"Arnold\",\n            \"lastName\": \"Shvarz\"\n        },\n        \"company\": \"Arni Co.\",\n        \"taxInfo\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"addressLine1\": \"123 NY Street\",\n        \"addressLine2\": \"Apt 333\",\n        \"street\": {\n            \"name\": null,\n            \"number\": null\n        },\n        \"city\": \"New York\",\n        \"country\": \"USA\",\n        \"subdivision\": \"CA\",\n        \"zipCode\": \"12300\",\n        \"phoneNumber\": \"123-456-7898\",\n        \"location\": {\n            \"latitude\": 37.7920903,\n            \"longitude\": -122.4036761\n        }\n    },\n    \"setAsDefault\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Make default address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Response Status tests",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"",
							"}",
							"",
							"//Response Header tests",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Content-Length\", \"2\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							"",
							"//Response Time test",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"//Response Size test",
							"pm.test(\"Response size is less than 2000B\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"//Response Body test",
							"pm.test(\"Body matches string '{}'\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"{}\");",
							"});",
							"",
							"pm.test(\"Response should be okay to process\", function() {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"c92658df-598b-42de-9a88-d4a7a17da693\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/default",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"default"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show Default address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Response Status tests",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"",
							"}",
							"",
							"//Response Body test",
							"pm.test(\"Response should be okay to process\", function() {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"// ID",
							"pm.test(\"New ID is in response\"), function () {",
							"    pm.expect(pm.response.text()).to.include(\"3f40cdcf-ac9c-44c4-8c46-5a0ea2efeda6\");",
							"};",
							"",
							"pm.test(\"ID is correct\"), function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(\"3f40cdcf-ac9c-44c4-8c46-5a0ea2efeda6\"); //Json 2 level",
							"};",
							"",
							"//Fist name",
							"pm.test(\"FN is correct\"), function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(\"Arnold\"); //Json 3 level",
							"};",
							"",
							"//Last name",
							"pm.test(\"LN is correct\"), function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.fullName.lasttName).to.eql(\"Shvarz\"); //Json 3 level ",
							"};",
							"",
							"//Response Header tests",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Content-Length\", \"348\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							"",
							"//Response Time test",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"//Response Size test",
							"pm.test(\"Response size is less than 10KB\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(10240);",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/get-default-address",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"get-default-address"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All addresses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"",
							"}",
							"",
							"pm.test(\"Response should be okay to process\", function() {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"})",
							"",
							"pm.test(\"New ID is in response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"c92658df-598b-42de-9a88-d4a7a17da693\");",
							"});",
							"",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response size is less than 10 KB\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(10000);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Specific addresses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"",
							"}",
							"",
							"pm.test(\"Response should be okay to process\", function() {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"})",
							"",
							"",
							"//Check Phone number",
							"pm.test(\"Check Phone number\"), function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(\"123-456-7898\"); ",
							"};",
							"",
							"//Check zipCode",
							"pm.test(\"Check ZipCode\"), function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.zipCode).to.eql(\"12300\"); ",
							"};",
							"",
							"//Check Fist and Last name",
							"pm.test(\"Check Fist and Last name\"), function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(\"Arnold\"); ",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(\"Shvarz\"); ",
							"};",
							"",
							"//Entire response all informations",
							"pm.test(\"Entire response is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(\"c92658df-598b-42de-9a88-d4a7a17da693\");",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(\"Arnold\");",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(\"Shvarz\");",
							"    pm.expect(jsonData.address.country).to.eql(\"USA\");",
							"    pm.expect(jsonData.address.subdivision).to.eql(\"CA\");",
							"    pm.expect(jsonData.address.city).to.eql(\"New York\");",
							"    pm.expect(jsonData.address.zipCode).to.eql(\"12300\");",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(\"123-456-7898\");",
							"    pm.expect(jsonData.address.company).to.eql(\"Arni Co.\");",
							"    pm.expect(jsonData.address.addressLine1).to.eql(\"123 NY Street\");",
							"    pm.expect(jsonData.address.addressLine2).to.eql(\"Apt 333\");",
							"    //pm.expect(jsonData.isDefualtAddress).to.eql(true); ",
							"});",
							"",
							"//Respons Time",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"tests['Response Time is Acceptable'] = responseTime < 1000;",
							"",
							"//Response Size",
							"pm.test(\"Response size is less than 2000 B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"pm.test(\"Response body should be in the correct format\", function() {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.address).to.be.a('object');",
							"    pm.expect(jsonData.address.id).to.be.a('string');",
							"    pm.expect(jsonData.address.fullName).to.be.a('object');",
							"    pm.expect(jsonData.address.fullName.firstName).to.be.a('string');",
							"    pm.expect(jsonData.address.fullName.lastName).to.be.a('string');",
							"    pm.expect(jsonData.address.country).to.be.a('string');",
							"    pm.expect(jsonData.address.subdivision).to.be.a('string');",
							"    pm.expect(jsonData.address.city).to.be.a('string');",
							"    pm.expect(jsonData.address.zipCode).to.be.a('string');",
							"    pm.expect(jsonData.address.phoneNumber).to.be.a('string');",
							"    pm.expect(jsonData.address.addressLine1).to.be.a('string');",
							"    pm.expect(jsonData.address.addressLine2).to.be.a('string');",
							"    pm.expect(jsonData.isDefaultAddress).to.be.a('boolean');",
							"});",
							"    ",
							"    "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/c92658df-598b-42de-9a88-d4a7a17da693",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"c92658df-598b-42de-9a88-d4a7a17da693"
					]
				}
			},
			"response": []
		},
		{
			"name": "Modify existing address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Response Status tests",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"",
							"}",
							"",
							"//Response Header tests",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Content-Length\", \"2\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							"",
							"//Response Time test",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"//Response Size test",
							"pm.test(\"Response size is less than 2000B\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"//Response Body test",
							"pm.test(\"Body matches string '{}'\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"{}\");",
							"});",
							"",
							"pm.test(\"Response should be okay to process\", function() {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"address\": {\n        \"id\": \"c92658df-598b-42de-9a88-d4a7a17da693\",\n        \"fullName\": {\n            \"firstName\": \"Arnold\",\n            \"lastName\": \"Schwarzenegger\"\n        },\n        \"company\": \"IronCo.\",\n        \"taxInfo\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"addressLine1\": \"555 Main Street\",\n        \"addressLine2\": \"Apt 777\",\n        \"street\": {\n            \"name\": null,\n            \"number\": null\n        },\n        \"city\": \"San Francisco\",\n        \"country\": \"USA\",\n        \"subdivision\": \"CA\",\n        \"zipCode\": \"94104\",\n        \"phoneNumber\": \"888-888-0000\",\n        \"location\": {\n            \"latitude\": 37.7920903,\n            \"longitude\": -122.4036761\n        }\n    },\n    \"setAsDefault\": false,\n    \"fieldMask\": {\n        \"paths\": [\n            \"fullName.firstName\",\n            \"fullName.lastName\",\n            \"company\",\n            \"addressLine1\",\n            \"addressLine2\",\n            \"city\",\n            \"country\",\n            \"subdivision\",\n            \"zipCode\",\n            \"phoneNumber\",\n            \"location.latitude\",\n            \"location.longitude\",\n            \"setAsDefault\"\n        ]\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/c92658df-598b-42de-9a88-d4a7a17da693",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"c92658df-598b-42de-9a88-d4a7a17da693"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Specific Updated address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Response Status tests",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"",
							"}",
							"",
							"//Access by text filter",
							"pm.test(\"company is IronCo.,\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"company\", \"IronCo.\");",
							"});",
							"",
							"//Access by JSON parse",
							"pm.test(\"Key and Value is correct\", function () {",
							"    var jsonData = JSON.parse(responseBody);",
							"    jsonData.company === (\"IronCo.\");",
							"    jsonData.phoneNumber === (\"888-888-0000\");",
							"});",
							"",
							"//Access to id inside Object if using pre request script company set",
							"pm.test(\"Company, ID, FN and LN is correct after update\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.company).to.eql(\"IronCo.\");",
							"    pm.expect(jsonData.address.id).to.eql(\"c92658df-598b-42de-9a88-d4a7a17da693\");",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(\"Arnold\");",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(\"Schwarzenegger\");",
							"    pm.expect(jsonData.address.addressLine1).to.eql(\"555 Main Street\");",
							"    pm.expect(jsonData.address.addressLine2).to.eql(\"Apt 777\");",
							"}) ",
							"",
							"pm.test(\"Response should be okay to process\", function() {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"})",
							"",
							"//Snippet JSON Value check, but \"const jsonData\" changed to \"let jsonResponse\"",
							"pm.test(\"Response body should be in the correct format\", function() {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.address).to.be.a('object');",
							"    pm.expect(jsonData.address.id).to.be.a('string');",
							"    pm.expect(jsonData.address.fullName).to.be.a('object');",
							"    pm.expect(jsonData.address.fullName.firstName).to.be.a('string');",
							"    pm.expect(jsonData.address.fullName.lastName).to.be.a('string');",
							"    pm.expect(jsonData.address.country).to.be.a('string');",
							"    pm.expect(jsonData.address.subdivision).to.be.a('string');",
							"    pm.expect(jsonData.address.city).to.be.a('string');",
							"    pm.expect(jsonData.address.zipCode).to.be.a('string');",
							"    pm.expect(jsonData.address.phoneNumber).to.be.a('string');",
							"    pm.expect(jsonData.address.addressLine1).to.be.a('string');",
							"    pm.expect(jsonData.address.addressLine2).to.be.a('string');",
							"    pm.expect(jsonData.isDefaultAddress).to.be.a('boolean');",
							"});",
							"    ",
							"    ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/c92658df-598b-42de-9a88-d4a7a17da693",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"c92658df-598b-42de-9a88-d4a7a17da693"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Response Status tests",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"",
							"}",
							"",
							"//Response Header tests",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Content-Length\", \"2\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							"",
							"//Response Time test",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"//Response Size test",
							"pm.test(\"Response size is less than 2000B\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"//Response Body test",
							"pm.test(\"Body matches string '{}'\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"{}\");",
							"});",
							"",
							"pm.test(\"Response should be okay to process\", function() {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/c92658df-598b-42de-9a88-d4a7a17da693",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"c92658df-598b-42de-9a88-d4a7a17da693"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Specific Deleted addresses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = false;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = true;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"",
							"}",
							"",
							"pm.test(\"New ID is in response\"), function () {",
							"    pm.expect(pm.response.text()).to.include(\"c92658df-598b-42de-9a88-d4a7a17da693\");",
							"};",
							"",
							"//Access by JSON parse",
							"pm.test(\"Key and Value is correct\", function () {",
							"    var jsonData = JSON.parse(responseBody);",
							"    jsonData.company === (\"IronCo.\");",
							"    jsonData.phoneNumber === (\"888-888-0000\");",
							"});",
							"",
							"//Access to id inside Object if using pre request script company set",
							"pm.test(\"Details, is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: c92658df-598b-42de-9a88-d4a7a17da693\");",
							"}) ",
							"",
							"pm.test(\"Response should be okay to process\", function() {",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"})",
							"",
							"pm.test(\"Response body should be in the correct format\", function() {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.be.a('string');",
							"    pm.expect(jsonData.details).to.be.a('object');",
							"    pm.expect(jsonData.details.cant_find).to.be.a('string');",
							"    });",
							"",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/c92658df-598b-42de-9a88-d4a7a17da693",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"c92658df-598b-42de-9a88-d4a7a17da693"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete address 2nd time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = false;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = true;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"",
							"}",
							"",
							"pm.test(\"New ID is in response\"), function () {",
							"    pm.expect(pm.response.text()).to.include(\"c92658df-598b-42de-9a88-d4a7a17da693\");",
							"};",
							"",
							"//Access by JSON parse",
							"pm.test(\"Key and Value is correct\", function () {",
							"    var jsonData = JSON.parse(responseBody);",
							"    jsonData.company === (\"IronCo.\");",
							"    jsonData.phoneNumber === (\"888-888-0000\");",
							"});",
							"",
							"//Access to id inside Object if using pre request script company set",
							"pm.test(\"Details, is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: c92658df-598b-42de-9a88-d4a7a17da693\");",
							"}) ",
							"",
							"pm.test(\"Response should be okay to process\", function() {",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"})",
							"",
							"pm.test(\"Response body should be in the correct format\", function() {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.be.a('string');",
							"    pm.expect(jsonData.details).to.be.a('object');",
							"    pm.expect(jsonData.details.cant_find).to.be.a('string');",
							"    });",
							"",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/c92658df-598b-42de-9a88-d4a7a17da693",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"c92658df-598b-42de-9a88-d4a7a17da693"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "1lN4v1Ane8UPHvtsbY2t4EJJhRgqeim_DGZL8AKcaZI.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIzLTA5LTI4VDE5OjE4OjEwLjAxNFoiLCJ1aWQiOiIwNTYyYzQzMi0xNWM5LTQ2Y2ItYmIyNi1jNzY3MTc2NDUxYzIiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjUzNTJiNGY4LWI5OGYtNGE3OS1hNTUzLTcwZWQwOWM5Mjk1NSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMy0wOS0yOFQyMzoxODoxMC4wMTRaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}