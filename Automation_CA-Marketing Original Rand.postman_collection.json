{
	"info": {
		"_postman_id": "63c35332-1024-4d72-905d-a1213f65a159",
		"name": "Automation_CA-Marketing Original Rand",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29356510"
	},
	"item": [
		{
			"name": "Create new postal address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"",
							"}",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"Response assertions\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"})",
							"",
							"//Set Environmental Varible \"Id\"",
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"ID\", jsonData.id);",
							"",
							"// One more way to set Environmental variable 'id'",
							"//var jsonData = JSON.parse(responseBody);",
							"//pm.environment(\"id\", jsonData.id);",
							"",
							"//one more way to set Env Var ID",
							"// let jsonData = pm.response.json();",
							"// pm.environment.set(\"ID\", jsonData.id); ",
							"",
							"// pm.test(\"your test name\", function () {",
							"// var jsonData = pm.response.json();",
							"// pm.expect(jsonData.value).to.eql(100);",
							"// }):",
							"",
							"//for this test we are using line 54 as well",
							"pm.test(\"ID is correct\", function() {",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"ID\"));",
							"});",
							"",
							"",
							"//Response body Contains string (current sample)",
							"pm.test(\"Body contains string id\", () => {",
							"    pm.expect(pm.response.text()).to.include(\"id\");",
							"})",
							"",
							"//Respons Time",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"tests['Response Time is Acceptable'] = responseTime < 1000;",
							"",
							"//Response Size",
							"pm.test(\"Response size is less than 2000 B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"//Response Header tests",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Content-Length\", \"45\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							"",
							"pm.test(\"Response should be okay to process\", function() {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"})",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.clear();  //clear all enviroment",
							"",
							"// pm.environment.unset(\"ID\") if you need clrear only one ",
							"// pm.environment.unset(\"COMPANY\")",
							"// pm.environment.unset(\"ZIPCODE\")",
							"// pm.environment.unset(\"ADDRESSLINE1\")",
							"// pm.environment.unset(\"ADDRESSLINE2\")",
							"// pm.environment.unset(\"FIRSTNAME\")",
							"// pm.environment.unset(\"LASTNAME\")",
							"// pm.environment.unset(\"CITY\")",
							"// pm.environment.unset(\"COUNTRY\")",
							"// pm.environment.unset(\"PHONENUMBER\")",
							"// pm.environment.unset(\"SUBDIVISION\")",
							"",
							"//return a random integer from 10000 to 90000 with 5 digits",
							"pm.environment.set(\"ZIPCODE\", toString(Math.floor(Math.random() + 90000) + 10000));",
							"",
							"//returns a random integer from 100 with 3 digits",
							"pm.environment.set(\"ADDRESSLINE2\", toString(Math.floor(Math.random() + 900) + 100));",
							"",
							"const stateAbbreviations = [",
							"'AL', 'AK', 'AZ', 'AS', 'AR', 'CA', 'CO', 'CT', 'DE', 'DC', 'FM', 'FL', 'GA',",
							"'GU', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MH', 'MD', 'MA',",
							"'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', ",
							"'MP', 'OH', 'OK', 'OR', 'PW', 'PA', 'PR', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT',",
							"'VT', 'VI', 'VA', 'WA', 'WV', 'WI', 'WY'",
							"];",
							"const randomState = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];",
							"pm.environment.set(\"SUBDIVISION\", randomState);",
							"",
							"// using Faker lib https://learning.postman.com/docs/writing-scripts/scripts-references/ varibles-liast/",
							"let fName = pm.variables.replaceIn('{{$randomFirstName}}') //$randomFirstName I take from Faker lib (link above)",
							"pm.environment.set(\"FIRSTNAME\", fName);",
							"",
							"let lName = pm.variables.replaceIn('{{$randomLastName}}')",
							"pm.environment.set(\"LASTNAME\", lName);",
							"",
							"let co = pm.variables.replaceIn('{{$randomCompanyName}}')",
							"pm.environment.set(\"COMPANY\", co);",
							"",
							"let addrLn1 = pm.variables.replaceIn('{{$randomStreetAddress}}')",
							"pm.environment.set(\"ADDRESSLINE1\", addrLn1);",
							"",
							"let cty = pm.variables.replaceIn('{{$randomCity}}')",
							"pm.environment.set(\"CITY\", cty);",
							"",
							"let cntry = pm.variables.replaceIn('{{$randomCountry}}')",
							"pm.environment.set(\"COUNTRY\", cntry);",
							"",
							"let phoneNum = pm.variables.replaceIn('{{$randomPhoneNumber}}')",
							"pm.environment.set(\"PHONENUMBER\", cntry);",
							"",
							"let boo = pm.variables.replaceIn('{{$randomBoolean}}')",
							"pm.environment.set(\"SETASDEFAULT\", boo);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"address\": {\n        \"fullName\": {\n            \"firstName\": \"{{FIRSTNAME}}\",\n            \"lastName\": \"{{LASTNAME}}\"\n        },\n        \"company\": \"{{COMPANY}}\",\n        \"taxInfo\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"addressLine1\": \"{{ADDRESSLINE1}}\",\n        \"addressLine2\": \"{{ADDRESSLINE2}}\",\n        \"street\": {\n            \"name\": null,\n            \"number\": null\n        },\n        \"city\": \"{{CITY}}\",\n        \"country\": \"{{COUNTRY}}\",\n        \"subdivision\": \"{{SUBDIVISION}}\",\n        \"zipCode\": \"{{ZIPCODE}}\",\n        \"phoneNumber\": \"{{PHONENUMBER}}\",\n        \"location\": {\n            \"latitude\": 37.7920903,\n            \"longitude\": -122.4036761\n        }\n    },\n    \"setAsDefault\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Make default address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Response Status tests",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"",
							"}",
							"",
							"//Response Header tests",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Content-Length\", \"2\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							"",
							"//Response Time test",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"//Response Size test",
							"pm.test(\"Response size is less than 2000B\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"//Response Body test",
							"pm.test(\"Body matches string '{}'\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"{}\");",
							"});",
							"",
							"pm.test(\"Response should be okay to process\", function() {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{ID}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/default",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"default"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show Default address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Response Status tests",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"",
							"}",
							"",
							"//Access by JSON parse (Response body: JSON value check)",
							"pm.test(\"Company is current\", function () {",
							"    var jsonData = JSON.parse(responseBody);",
							"    jsonData.company === (pm.environment.get(\"COMPANY\"));",
							"});",
							"",
							"//Access to id inside Object if using pre request script company set",
							"pm.test(\"Company is correct again\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"COMPANY\"));",
							"});",
							"",
							"pm.test(\"Address ID is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));",
							"});",
							"",
							"pm.test(\"First name is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"FIRSTNAME\"));",
							"});",
							"",
							"pm.test(\"Last name is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"LASTNAME\"));",
							"});",
							"",
							"pm.test(\"AddressLine1 is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.addressLine1).to.eql(pm.environment.get(\"ADDRESSLINE1\"));",
							"});",
							"",
							"pm.test(\"AddressLine2 is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.addressLine2).to.eql(pm.environment.get(\"ADDRESSLINE2\"));",
							"});",
							"",
							"pm.test(\"City is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.city).to.eql(pm.environment.get(\"CITY\"));",
							"});",
							"",
							"pm.test(\"Country is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.country).to.eql(pm.environment.get(\"COUNTRY\"));",
							"});",
							"",
							"pm.test(\"Subdivision is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.subdivision).to.eql(pm.environment.get(\"SUBDIVISION\"));",
							"});",
							"",
							"pm.test(\"ZipCode is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.zipCode).to.eql(pm.environment.get(\"ZIPCODE\"));",
							"});",
							"",
							"pm.test(\"Phone number is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(pm.environment.get(\"PHONENUMBER\"));",
							"});",
							"",
							"",
							"//Response Body test",
							"pm.test(\"Response should be okay to process\", function() {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"pm.test('Response body should be in the correct format', function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.address).to.be.a('object');",
							"    pm.expect(jsonData.address.id).to.be.a('string');",
							"    pm.expect(jsonData.address.fullName).to.be.a('object');",
							"    pm.expect(jsonData.address.fullName.firstName).to.be.a('string');",
							"    pm.expect(jsonData.address.fullName.lastName).to.be.a('string');",
							"    pm.expect(jsonData.address.country).to.be.a('string');",
							"    pm.expect(jsonData.address.subdivision).to.be.a('string');",
							"    pm.expect(jsonData.address.city).to.be.a('string');",
							"    pm.expect(jsonData.address.zipCode).to.be.a('string');",
							"    pm.expect(jsonData.address.phoneNumber).to.be.a('string');",
							"    pm.expect(jsonData.address.addressLine1).to.be.a('string');",
							"    pm.expect(jsonData.address.addressLine2).to.be.a('string');",
							"",
							"})",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/get-default-address",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"get-default-address"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All addresses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"",
							"}",
							"",
							"pm.test(\"Response should be okay to process\", function() {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"})",
							"",
							"",
							"// can together",
							"pm.test(\"New information is in response\", function () {",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ZIPCODE\"));",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"COMPANY\"));",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"FIRSTNAME\"));",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"LASTNAME\"));",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"CITY\"));",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"COUNTRY\"));",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"SUBDIVISION\"));",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"PHONENUMBER\"));",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ADDRESSLINE1\"));",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ADDRESSLINE2\"));",
							"});",
							"",
							"",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response size is less than 15 KB\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(15000);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Specific addresses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Response Status tests",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"",
							"}",
							"",
							"//Response Body test",
							"pm.test(\"Response should be okay to process\", function() {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"",
							"pm.test(\"ID is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));",
							"});",
							" ",
							" // multi test",
							"pm.test(\"Entire response is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"FIRSTNAME\"));",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"LASTNAME\"));",
							"    pm.expect(jsonData.address.country).to.eql(pm.environment.get(\"COUNTRY\"));",
							"    pm.expect(jsonData.address.subdivision).to.eql(pm.environment.get(\"SUBDIVISION\"));",
							"    pm.expect(jsonData.address.city).to.eql(pm.environment.get(\"CITY\"));",
							"    pm.expect(jsonData.address.zipCode).to.eql(toString(pm.environment.get(\"ZIPCODE\")));",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(pm.environment.get(\"PHONENUMBER\"));",
							"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"COMPANY\"));",
							"    pm.expect(jsonData.address.addressLine1).to.eql(pm.environment.get(\"ADDRESSLINE1\"));",
							"    pm.expect(jsonData.address.addressLine2).to.eql(toString(pm.environment.get(\"ADDRESSLINE2\")));",
							"});",
							"",
							"",
							"pm.test('Response body should be in the correct format', function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.address).to.be.a('object');",
							"    pm.expect(jsonData.address.id).to.be.a('string');",
							"    pm.expect(jsonData.address.fullName).to.be.a('object');",
							"    pm.expect(jsonData.address.fullName.firstName).to.be.a('string');",
							"    pm.expect(jsonData.address.fullName.lastName).to.be.a('string');",
							"    pm.expect(jsonData.address.country).to.be.a('string');",
							"    pm.expect(jsonData.address.subdivision).to.be.a('string');",
							"    pm.expect(jsonData.address.city).to.be.a('string');",
							"    pm.expect(jsonData.address.zipCode).to.be.a('string');",
							"    pm.expect(jsonData.address.phoneNumber).to.be.a('string');",
							"    pm.expect(jsonData.address.addressLine1).to.be.a('string');",
							"    pm.expect(jsonData.address.addressLine2).to.be.a('string');",
							"",
							"})",
							"",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Response Status tests",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"",
							"}",
							"",
							"//Response Header tests",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Content-Length\", \"2\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							"",
							"//Response Time test",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"//Response Size test",
							"pm.test(\"Response size is less than 2000B\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"//Response Body test",
							"pm.test(\"Body matches string '{}'\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"{}\");",
							"});",
							"",
							"pm.test(\"Response should be okay to process\", function() {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// pm.environment.clear();  //clear all enviroment",
							"",
							"// pm.environment.unset(\"ID\") if you need clrear only one ",
							"// pm.environment.unset(\"COMPANY\")",
							"// pm.environment.unset(\"ZIPCODE\")",
							"// pm.environment.unset(\"ADDRESSLINE1\")",
							"// pm.environment.unset(\"ADDRESSLINE2\")",
							"// pm.environment.unset(\"FIRSTNAME\")",
							"// pm.environment.unset(\"LASTNAME\")",
							"// pm.environment.unset(\"CITY\")",
							"// pm.environment.unset(\"COUNTRY\")",
							"// pm.environment.unset(\"PHONENUMBER\")",
							"// pm.environment.unset(\"SUBDIVISION\")",
							"",
							"//return a random integer from 10000 to 90000 with 5 digits",
							"pm.environment.set(\"ZIPCODE\", toString(Math.floor(Math.random() + 90000) + 10000));",
							"",
							"//returns a random integer from 100 with 3 digits",
							"pm.environment.set(\"ADDRESSLINE2\", toString(Math.floor(Math.random() + 900) + 100));",
							"",
							"const stateAbbreviations = [",
							"'AL', 'AK', 'AZ', 'AS', 'AR', 'CA', 'CO', 'CT', 'DE', 'DC', 'FM', 'FL', 'GA',",
							"'GU', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MH', 'MD', 'MA',",
							"'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', ",
							"'MP', 'OH', 'OK', 'OR', 'PW', 'PA', 'PR', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT',",
							"'VT', 'VI', 'VA', 'WA', 'WV', 'WI', 'WY'",
							"];",
							"const randomState = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];",
							"pm.environment.set(\"SUBDIVISION\", randomState);",
							"",
							"// using Faker lib https://learning.postman.com/docs/writing-scripts/scripts-references/ varibles-liast/",
							"let fName = pm.variables.replaceIn('{{$randomFirstName}}') //$randomFirstName I take from Faker lib (link above)",
							"pm.environment.set(\"FIRSTNAME\", fName);",
							"",
							"let lName = pm.variables.replaceIn('{{$randomLastName}}')",
							"pm.environment.set(\"LASTNAME\", lName);",
							"",
							"let co = pm.variables.replaceIn('{{$randomCompanyName}}')",
							"pm.environment.set(\"COMPANY\", co);",
							"",
							"let addrLn1 = pm.variables.replaceIn('{{$randomStreetAddress}}')",
							"pm.environment.set(\"ADDRESSLINE1\", addrLn1);",
							"",
							"let cty = pm.variables.replaceIn('{{$randomCity}}')",
							"pm.environment.set(\"CITY\", cty);",
							"",
							"let cntry = pm.variables.replaceIn('{{$randomCountry}}')",
							"pm.environment.set(\"COUNTRY\", cntry);",
							"",
							"let phoneNum = pm.variables.replaceIn('{{$randomPhoneNumber}}')",
							"pm.environment.set(\"PHONENUMBER\", cntry);",
							"",
							"let boo = pm.variables.replaceIn('{{$randomBoolean}}')",
							"pm.environment.set(\"SETASDEFAULT\", boo);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"address\": {\n        \"id\": \"{{ID}}\",\n        \"fullName\": {\n            \"firstName\": \"{{FIRSTNAME}}\",\n            \"lastName\": \"{{LASTNAME}}\"\n        },\n        \"company\": \"{{COMPANY}}\",\n        \"taxInfo\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"addressLine1\": \"{{ADDRESSLINE1}}\",\n        \"addressLine2\": \"{{ADDRESSLINE2}}\",\n        \"street\": {\n            \"name\": null,\n            \"number\": null\n        },\n        \"city\": \"{{CITY}}\",\n        \"country\": \"{{COUNTRY}}\",\n        \"subdivision\": \"{{SUBDIVISION}}\",\n        \"zipCode\": \"{{ZIPCODE}}\",\n        \"phoneNumber\": \"{{PHONENUMBER}}\",\n        \"location\": {\n            \"latitude\": 37.7920903,\n            \"longitude\": -122.4036761\n        }\n    },\n    \"setAsDefault\": {{SETASDEFAULT}},\n    \"fieldMask\": {\n        \"paths\": [\n            \"fullName.firstName\",\n            \"fullName.lastName\",\n            \"company\",\n            \"addressLine1\",\n            \"addressLine2\",\n            \"city\",\n            \"country\",\n            \"subdivision\",\n            \"zipCode\",\n            \"phoneNumber\",\n            \"location.latitude\",\n            \"location.longitude\",\n            \"setAsDefault\"\n        ]\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Specific Updated address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Response Status tests",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"",
							"}",
							"",
							"pm.test(\"ID is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));",
							"});",
							"",
							"pm.test(\"First name is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"FIRSTNAME\"));",
							"});",
							"",
							"pm.test(\"Last name is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"LASTNAME\"));",
							" });   ",
							"    ",
							"pm.test(\"Country is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.country).to.eql(pm.environment.get(\"COUNTRY\"));",
							" }); ",
							"",
							"pm.test(\"Subdivision is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.subdivision).to.eql(pm.environment.get(\"SUBDIVISION\"));",
							" }); ",
							"",
							"pm.test(\"City is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.city).to.eql(pm.environment.get(\"CITY\"));",
							"}); ",
							"",
							"pm.test(\"Zipcode is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.zipCode).to.eql(toString(pm.environment.get(\"ZIPCODE\")));",
							"}); ",
							"",
							"pm.test(\"Phone number is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(pm.environment.get(\"PHONENUMBER\"));",
							"}); ",
							"",
							"pm.test(\"Company is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"COMPANY\"));",
							"}); ",
							"",
							"pm.test(\"Adress line 1 is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.addressLine1).to.eql(pm.environment.get(\"ADDRESSLINE1\"));",
							"}); ",
							"",
							"pm.test(\"Adress line 2 is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.addressLine2).to.eql(toString(pm.environment.get(\"ADDRESSLINE2\")));",
							"});",
							"",
							"pm.test(\"Set as default is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.isDefaultAddress).to.eql(Boolean(pm.environment.get(\"SETASDEFAULT\")));",
							"});",
							"",
							"pm.test(\"Response should be okay to process\", function() {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"})",
							"",
							"//Snippet JSON Value check, but \"const jsonData\" changed to \"let jsonResponse\"",
							"pm.test(\"Response body should be in the correct format\", function() {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.address).to.be.a('object');",
							"    pm.expect(jsonData.address.id).to.be.a('string');",
							"    pm.expect(jsonData.address.fullName).to.be.a('object');",
							"    pm.expect(jsonData.address.fullName.firstName).to.be.a('string');",
							"    pm.expect(jsonData.address.fullName.lastName).to.be.a('string');",
							"    pm.expect(jsonData.address.country).to.be.a('string');",
							"    pm.expect(jsonData.address.subdivision).to.be.a('string');",
							"    pm.expect(jsonData.address.city).to.be.a('string');",
							"    pm.expect(jsonData.address.zipCode).to.be.a('string');",
							"    pm.expect(jsonData.address.phoneNumber).to.be.a('string');",
							"    pm.expect(jsonData.address.addressLine1).to.be.a('string');",
							"    pm.expect(jsonData.address.addressLine2).to.be.a('string');",
							"    pm.expect(jsonData.isDefaultAddress).to.be.a('boolean');",
							"});",
							"    ",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Response Status tests",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"",
							"}",
							"",
							"//Response Header tests",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Content-Length\", \"2\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							"",
							"//Response Time test",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"//Response Size test",
							"pm.test(\"Response size is less than 2000B\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"//Response Body test",
							"pm.test(\"Body matches string '{}'\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"{}\");",
							"});",
							"",
							"pm.test(\"Response should be okay to process\", function() {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete address 2nd time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = false;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = true;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = true;  //negative test",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = true;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"",
							"}",
							"",
							"pm.test(\"Status code is 400, as expected\", function () {",
							"    pm.response.to.have.status(400);",
							"})",
							"",
							"//Response Time test",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"//Response Size test",
							"pm.test(\"Response size is less than 2000B\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"//Response Header tests",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Content-Length\", \"191\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							"",
							"pm.test(\"Order can't be deleted, nonexist. As expected\", function() {",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.an(\"object\")",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"})",
							"",
							"pm.test(\"Message is include previosly deleted ID\"), function () {",
							"    pm.expect(pm.response.text()).to.include(\"message\", (pm.enviroment.get(\"ID\")));",
							"};",
							"",
							"pm.test(\"Message details ID is correct\"), function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: \" + (pm.enviroment.get(\"ID\")));",
							"};",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Deleted address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = false;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = true;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = true;  //negative test",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = true;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"",
							"}",
							"",
							"pm.test(\"Status code is 400, as expected\", function () {",
							"    pm.response.to.have.status(400);",
							"})",
							"",
							"//Response Time test",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"//Response Size test",
							"pm.test(\"Response size is less than 2000B\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"//Response Header tests",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Content-Length\", \"191\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							"",
							"pm.test(\"Order can't be deleted, nonexist. As expected\", function() {",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.an(\"object\")",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"})",
							"",
							"pm.test(\"Message is include previosly deleted ID\"), function () {",
							"    pm.expect(pm.response.text()).to.include(\"message\", (pm.enviroment.get(\"ID\")));",
							"};",
							"",
							"pm.test(\"Message details ID is correct\"), function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: \" + (pm.enviroment.get(\"ID\")));",
							"};",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST_Make default DELETE address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = false;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = true;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = true;  //negative test",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = true;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"",
							"}",
							"",
							"pm.test(\"Status code is 400, as expected\", function () {",
							"    pm.response.to.have.status(400);",
							"})",
							"",
							"//Response Time test",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"//Response Size test",
							"pm.test(\"Response size is less than 2000B\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"//Response Header tests",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Content-Length\", \"191\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							"",
							"pm.test(\"Order can't be deleted, nonexist. As expected\", function() {",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.an(\"object\")",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"})",
							"",
							"pm.test(\"Message is include previosly deleted ID\"), function () {",
							"    pm.expect(pm.response.text()).to.include(\"message\", (pm.enviroment.get(\"ID\")));",
							"};",
							"",
							"pm.test(\"Message details ID is correct\"), function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: \" + (pm.enviroment.get(\"ID\")));",
							"};",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{ID}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/default",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"default"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Deleted address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = false;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = true;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = true;  //negative test",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = true;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"",
							"}",
							"",
							"pm.test(\"Status code is 400, as expected\", function () {",
							"    pm.response.to.have.status(400);",
							"})",
							"",
							"//Response Time test",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"//Response Size test",
							"pm.test(\"Response size is less than 2000B\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"//Response Header tests",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Content-Length\", \"191\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							"",
							"pm.test(\"Order can't be deleted, nonexist. As expected\", function() {",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.an(\"object\")",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"})",
							"",
							"pm.test(\"Message is include previosly deleted ID\"), function () {",
							"    pm.expect(pm.response.text()).to.include(\"message\", (pm.enviroment.get(\"ID\")));",
							"};",
							"",
							"pm.test(\"Message details ID is correct\"), function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: \" + (pm.enviroment.get(\"ID\")));",
							"};",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.unset(\"COMPANY\");",
							"pm.environment.set(\"COMPANY\", \"Google-\" + new Date().getTime());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"address\": {\n        \"id\": \"{{ID}}\",\n        \"fullName\": {\n            \"firstName\": \"Arnold\",\n            \"lastName\": \"Schwarzenegger\"\n        },\n        \"company\": \"{{COMPANY}}\",\n        \"taxInfo\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"addressLine1\": \"555 Main Street\",\n        \"addressLine2\": \"Apt 777\",\n        \"street\": {\n            \"name\": null,\n            \"number\": null\n        },\n        \"city\": \"San Francisco\",\n        \"country\": \"USA\",\n        \"subdivision\": \"CA\",\n        \"zipCode\": \"94104\",\n        \"phoneNumber\": \"888-888-0000\",\n        \"location\": {\n            \"latitude\": 37.7920903,\n            \"longitude\": -122.4036761\n        }\n    },\n    \"setAsDefault\": false,\n    \"fieldMask\": {\n        \"paths\": [\n            \"fullName.firstName\",\n            \"fullName.lastName\",\n            \"company\",\n            \"addressLine1\",\n            \"addressLine2\",\n            \"city\",\n            \"country\",\n            \"subdivision\",\n            \"zipCode\",\n            \"phoneNumber\",\n            \"location.latitude\",\n            \"location.longitude\",\n            \"setAsDefault\"\n        ]\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "gATyMwME5Ce6DYJTdiK2czOUz9YOu4fmS0pYs6wD6vY.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIzLTEwLTI4VDIwOjQ2OjU5LjY5MloiLCJ1aWQiOiIwNTYyYzQzMi0xNWM5LTQ2Y2ItYmIyNi1jNzY3MTc2NDUxYzIiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjUzNTJiNGY4LWI5OGYtNGE3OS1hNTUzLTcwZWQwOWM5Mjk1NSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMy0xMC0yOVQwMDo0Njo1OS42OTJaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}